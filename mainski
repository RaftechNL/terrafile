package main

import (
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sync"
	"time"

	"github.com/go-git/go-git/v5"
	"github.com/go-git/go-git/v5/plumbing"
	"github.com/go-git/go-git/v5/plumbing/transport"
	"github.com/go-git/go-git/v5/plumbing/transport/http"
	"github.com/go-git/go-git/v5/plumbing/transport/ssh"

	"gopkg.in/yaml.v2"
)

type AuthMethod struct {
	Token    *string `yaml:"token"`
	SSHKey   *string `yaml:"ssh_key"`
	Username *string `yaml:"username"`
	Password *string `yaml:"password"`
}

type AuthMethods struct {
	Refs map[string]AuthMethod
}

type TerraformModule struct {
	Source         string  `yaml:"source"`
	Version        string  `yaml:"version"`
	AuthMethodName *string `yaml:"authRef,omitempty"`
}

type Config struct {
	TerraformModules map[string]TerraformModule
	AuthMethods      AuthMethods
}

func (c *Config) LoadFromFile(filePath string) error {
	data, err := ioutil.ReadFile(filePath)
	if err != nil {
		return err
	}
	return yaml.Unmarshal(data, c)
}

func (tm *TerraformModule) Download() error {
	// you can use package like "go get" or "github.com/mitchellh/go-homedir" to expand ~ in the path
	modulePath := filepath.Join("path/to/download/modules/", tm.Version)
	_, err := git.PlainClone(modulePath, false, &git.CloneOptions{
		URL:      tm.Source,
		Progress: os.Stdout,
	})
	return err
}

func main() {

	var c Config
	err := c.LoadFromFile("terra.yaml")
	if err != nil {
		log.Fatal(err)
	}

	// Get the repository URL and authentication method from the command line arguments
	url := "git@github.com:RaftechNL/terrafile.git"
	authMethod := "ssh"

	var auth transport.AuthMethod

	// Set the appropriate authentication method
	if authMethod == "ssh" {
		pemBytes, err := ioutil.ReadFile(os.Getenv("HOME") + "/.ssh/id_rsa")

		// 	key := strings.Replace(os.Getenv("DEPLOY_KEY"), "\\n", "\n", -1)

		// 	// Username must be "git" for SSH auth to work, not your real username.
		//   // See https://github.com/src-d/go-git/issues/637
		// 	publicKey, err := ssh.NewPublicKeys("git", []byte(key), "")
		// 	if err != nil {
		// 		log.Fatalf("creating ssh auth method")
		// 	}

		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}

		auth, err = ssh.NewPublicKeys("git", pemBytes, "")
		if err != nil {
			fmt.Println(err)
			os.Exit(1)
		}

	} else if authMethod == "token" {
		token := os.Getenv("GITHUB_TOKEN")
		if token == "" {
			fmt.Println("GITHUB_TOKEN environment variable is not set")
			os.Exit(1)
		}
		auth = &http.BasicAuth{
			Username: "x-access-token",
			Password: token,
		}
	} else {
		fmt.Printf("Invalid authentication method: %s\n", authMethod)
		os.Exit(1)
	}

	fmt.Println(os.TempDir() + "/repo")

	fmt.Println("Removing old folder....")
	os.RemoveAll(os.TempDir() + "/repo")

	// Clone the repository
	_, err = git.PlainClone(os.TempDir()+"/repo", false, &git.CloneOptions{
		URL:           url,
		Auth:          auth,
		ReferenceName: plumbing.ReferenceName("refs/heads/master"),
		SingleBranch:  true,
	})

	if err != nil {
		fmt.Println("I have encountered an error")
		fmt.Println(err)
		os.Exit(1)
	}

	// jc := JobCoordinator{jobQueue: make(chan Job, 100)}
	// jc.Run(10)

	// for i := 0; i < 100; i++ {
	// 	jc.AddJob(i, func() {
	// 		fmt.Println("Running job", i)
	// 	}, time.Second*5)
	// }

	// jc.Wait()
	// fmt.Println("All jobs complete!")
}

type Job struct {
	id       int
	function func()
	timeout  time.Duration
}

func (jc *JobCoordinator) worker() {
	for job := range jc.jobQueue {
		timeout := time.After(job.timeout) // set timeout using the passed in value
		done := make(chan bool)

		go func() {
			job.function()
			done <- true
		}()

		select {
		case <-done:
			jc.waitGroup.Done()
		case <-timeout:
			fmt.Println("Job", job.id, "timed out.")
			jc.waitGroup.Done()
		}
	}
}

func (jc *JobCoordinator) Run(numWorkers int) {
	jc.waitGroup.Add(numWorkers)
	for i := 0; i < numWorkers; i++ {
		go jc.worker()
	}
}

type JobCoordinator struct {
	jobQueue  chan Job
	waitGroup sync.WaitGroup
}

func (jc *JobCoordinator) AddJob(id int, function func(), timeout time.Duration) {
	job := Job{id: id, function: function, timeout: timeout}
	jc.jobQueue <- job
	jc.waitGroup.Add(1)
}

func (jc *JobCoordinator) Wait() {
	jc.waitGroup.Wait()
	close(jc.jobQueue)
}
